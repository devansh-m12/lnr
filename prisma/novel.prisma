// Novel Related Models

// Content Models
model Content {
  id             String        @id @default(cuid())
  title          String
  description    String        @db.Text
  cover_image_url String?
  type           ContentType
  status         ContentStatus @default(ONGOING)
  rating         Float         @default(0)
  views          Int          @default(0)
  author_id      String
  language       String        @default("en")
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  // Relations
  author          User            @relation(fields: [author_id], references: [id])
  chapters        Chapter[]
  library_entries UserLibrary[]
  ratings         Rating[]
  genres          ContentGenre[]
  tags            ContentTag[]

  @@index([author_id])
  @@index([type])
  @@index([status])
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  chapter_number Float
  content_id  String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  content         Content          @relation(fields: [content_id], references: [id], onDelete: Cascade)
  chapter_content ChapterContent?
  comments        Comment[]
  reading_progress ReadingProgress[]
  bookmarks       Bookmark[]
  library_last_read UserLibrary[]  @relation("LastReadChapter")

  @@unique([content_id, chapter_number])
  @@index([content_id])
}

model ChapterContent {
  id              String        @id @default(cuid())
  chapter_id      String        @unique
  content_type    ContentType
  text_content    String?       @db.Text
  reading_direction ReadingDirection @default(LTR)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  // Relations
  chapter         Chapter       @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  images          ChapterImage[]

  @@index([chapter_id])
}

model ChapterImage {
  id                 String   @id @default(cuid())
  chapter_content_id String
  image_url          String
  sequence_number    Int
  created_at         DateTime @default(now())

  // Relations
  chapter_content    ChapterContent @relation(fields: [chapter_content_id], references: [id], onDelete: Cascade)

  @@unique([chapter_content_id, sequence_number])
  @@index([chapter_content_id])
}

// Categorization Models
model Genre {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text

  // Relations
  contents    ContentGenre[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text

  // Relations
  contents    ContentTag[]
}

// Junction Tables
model ContentGenre {
  content_id String
  genre_id   String

  content    Content    @relation(fields: [content_id], references: [id], onDelete: Cascade)
  genre      Genre      @relation(fields: [genre_id], references: [id], onDelete: Cascade)

  @@id([content_id, genre_id])
  @@index([content_id])
  @@index([genre_id])
}

model ContentTag {
  content_id String
  tag_id     String

  content    Content    @relation(fields: [content_id], references: [id], onDelete: Cascade)
  tag        Tag        @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([content_id, tag_id])
  @@index([content_id])
  @@index([tag_id])
}

// User Interaction Models
model Comment {
  id         String    @id @default(cuid())
  content    String    @db.Text
  user_id    String
  chapter_id String
  parent_id  String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chapter   Chapter   @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies   Comment[] @relation("CommentReplies")

  @@index([user_id])
  @@index([chapter_id])
  @@index([parent_id])
}

model UserLibrary {
  id              String        @id @default(cuid())
  user_id         String
  content_id      String
  reading_status  ReadingStatus @default(PLAN_TO_READ)
  last_read_chapter_id String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  content         Content       @relation(fields: [content_id], references: [id], onDelete: Cascade)
  last_read_chapter Chapter?    @relation("LastReadChapter", fields: [last_read_chapter_id], references: [id])

  @@unique([user_id, content_id])
  @@index([user_id])
  @@index([content_id])
}

model Rating {
  id         String   @id @default(cuid())
  user_id    String
  content_id String
  score      Int      @db.SmallInt
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  content   Content  @relation(fields: [content_id], references: [id], onDelete: Cascade)

  @@unique([user_id, content_id])
  @@index([user_id])
  @@index([content_id])
}

model ReadingProgress {
  id                 String   @id @default(cuid())
  user_id            String
  chapter_id         String
  progress_percentage Float    @default(0)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chapter  Chapter  @relation(fields: [chapter_id], references: [id], onDelete: Cascade)

  @@unique([user_id, chapter_id])
  @@index([user_id])
  @@index([chapter_id])
}

model Bookmark {
  id           String   @id @default(cuid())
  user_id      String
  chapter_id   String
  page_number  Int?
  note         String?  @db.Text
  created_at   DateTime @default(now())

  // Relations
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chapter  Chapter  @relation(fields: [chapter_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([chapter_id])
}

// Enums
enum ContentType {
  NOVEL
  MANGA
  MANHWA
}

enum ContentStatus {
  ONGOING
  COMPLETED
  HIATUS
}

enum ReadingStatus {
  PLAN_TO_READ
  READING
  COMPLETED
  DROPPED
}

enum ReadingDirection {
  LTR
  RTL
} 