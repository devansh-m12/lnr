// User Related Models
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  username      String    @unique
  password      String?
  avatar_url    String?
  role          UserRole  @default(READER)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  token         String?

  // Relations
  accounts        Account[]
  sessions        Session[]
  authored_content Content[]
  comments        Comment[]
  library         UserLibrary[]
  ratings         Rating[]
  reading_progress ReadingProgress[]
  bookmarks       Bookmark[]
  blog_posts      BlogPost[]
  blog_comments   BlogComment[]
  blog_likes      BlogLike[]
}

// NextAuth Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

enum UserRole {
  READER
  AUTHOR
  ADMIN
} 